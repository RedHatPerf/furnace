---
- name: Deploy Furnace
  k8s:
    definition:
      kind: Deployment
      apiVersion: apps/v1
      metadata:
        name: '{{ ansible_operator_meta.name }}'
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: furnace
            app.kubernetes.io/instance: '{{ ansible_operator_meta.name }}'
        template:
          metadata:
            labels:
              app: furnace
              app.kubernetes.io/instance: '{{ ansible_operator_meta.name }}'
              app.kubernetes.io/managed-by: furnace-operator
          spec:
            containers:
            - name: furnace
              image: "quay.io/rvansa/furnace-app"
              ports:
              - containerPort: 8443
              env:
              - name: QUARKUS_HTTP_SSL_CERTIFICATE_FILE
                value: /var/certs/tls.crt
              - name: QUARKUS_HTTP_SSL_CERTIFICATE_KEY_FILE
                value: /var/certs/tls.key
              - name: QUARKUS_HTTP_INSECURE_REQUESTS
                value: disabled
              - name: SERVICE_NAME
                value: '{{ ansible_operator_meta.name }}'
              - name: POD_NAME
                valueFrom:
                  fieldRef:
                    apiVersion: "v1"
                    fieldPath: "metadata.name"
              - name: POD_NAMESPACE
                valueFrom:
                  fieldRef:
                    apiVersion: "v1"
                    fieldPath: "metadata.namespace"
              - name: PROXY_CLIENT_MP_REST_URI
                value: http://localhost:8443
              volumeMounts:
              - name: svc-certs
                mountPath: /var/certs
                readOnly: true
            volumes:
            - name: svc-certs
              secret:
                secretName: '{{ ansible_operator_meta.name }}-svc'
- name: Create service
  k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: '{{ ansible_operator_meta.name }}'
        namespace: '{{ ansible_operator_meta.namespace }}'
        annotations:
          service.beta.openshift.io/serving-cert-secret-name: '{{ ansible_operator_meta.name }}-svc'
        labels:
          app.kubernetes.io/managed-by: furnace-operator
      spec:
        ports:
        - name: https
          port: 443
          protocol: TCP
          targetPort: 8443
        selector:
          app: furnace
          app.kubernetes.io/instance: '{{ ansible_operator_meta.name }}'
        sessionAffinity: None
        type: ClusterIP
- name: Create route
  k8s:
    definition:
      apiVersion: route.openshift.io/v1
      kind: Route
      metadata:
        name: '{{ ansible_operator_meta.name }}'
        namespace: '{{ ansible_operator_meta.namespace }}'
        labels:
          app.kubernetes.io/managed-by: furnace-operator
      spec:
        subdomain: '{{ ansible_operator_meta.name }}'
        port:
          targetPort: https
        tls:
          termination: reencrypt
          insecureEdgeTerminationPolicy: Redirect
        to:
          kind: Service
          name: '{{ ansible_operator_meta.name }}'
- name: Create mutation webhook
  k8s:
    definition:
      apiVersion: admissionregistration.k8s.io/v1
      kind: MutatingWebhookConfiguration
      metadata:
        annotations:
          service.beta.openshift.io/inject-cabundle: "true"
        name: '{{ ansible_operator_meta.name }}-{{ ansible_operator_meta.namespace }}-webhook'
      webhooks:
      - admissionReviewVersions:
        - v1beta1
        clientConfig:
          service:
            name: '{{ ansible_operator_meta.name }}'
            namespace: '{{ ansible_operator_meta.namespace }}'
            path: /webhook/mutate
            port: 443
        failurePolicy: Ignore
        matchPolicy: Exact
        name: furnace-operator.hyperfoil.io
        reinvocationPolicy: Never
        namespaceSelector:
          matchLabels:
            furnace: enabled
        rules:
        - apiGroups:
          - ""
          apiVersions:
          - v1
          operations:
          - CREATE
          resources:
          - pods
          scope: '*'
        sideEffects: None
        timeoutSeconds: 30
- name: Install kernel sources on workers
  when: '{{ (installKernelSrc is defined) and installKernelSrc }}'
  k8s:
    apiVersion: machineconfiguration.openshift.io/v1
    kind: MachineConfig
    metadata:
      labels:
        machineconfiguration.openshift.io/role: worker
        installedBy: furnace-operator
      name: 03-worker-extensions
    spec:
      config:
        ignition:
          version: 3.1.0
      extensions:
        - kernel-devel
